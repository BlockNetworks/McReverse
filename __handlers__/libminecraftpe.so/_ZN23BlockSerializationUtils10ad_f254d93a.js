/*
 * Auto-generated by Frida. Please modify to match the signature of _ZN23BlockSerializationUtils10addToCacheERNS_15NbtToBlockCacheEjPK5Block.
 * This stub is currently auto-generated from manpages when available.
 *
 * For full API reference, see: https://frida.re/docs/javascript-api/
 */

{
  /**
   * Called synchronously when about to call _ZN23BlockSerializationUtils10addToCacheERNS_15NbtToBlockCacheEjPK5Block.
   *
   * @this {object} - Object allowing you to store state for use in onLeave.
   * @param {function} log - Call this function with a string to be presented to the user.
   * @param {array} args - Function arguments represented as an array of NativePointer objects.
   * For example use args[0].readUtf8String() if the first argument is a pointer to a C string encoded as UTF-8.
   * It is also possible to modify arguments by assigning a NativePointer object to an element of this array.
   * @param {object} state - Object allowing you to keep state across function calls.
   * Only one JavaScript function will execute at a time, so do not worry about race-conditions.
   * However, do not use this to store function arguments across onEnter/onLeave, but instead
   * use "this" which is an object for keeping state local to an invocation.
   */
  onEnter: function (log, args, state) {
    log('_ZN23BlockSerializationUtils10addToCacheERNS_15NbtToBlockCacheEjPK5Block(): ' + args[0] + ", " + args[1] + ", " + args[2] + ", " + args[3] + ", " + args[4] + ", " + args[5]);

    // Parameters
    var blockCache = args[3];
    var id = args[1].toInt32();
    var block_ptr = args[2];

    // Functions
    var fn_get_runtime_id = new NativeFunction(Module.findExportByName("libminecraftpe.so", "_ZNK5Block12getRuntimeIdEv"),
        'pointer', ['pointer']);

    var runtimeId = fn_get_runtime_id(block_ptr);
    console.log("id: " + id);
    console.log("runtimeId: " + runtimeId.readUInt());

    console.log(0);
    console.log(args[0].add(4).readPointer().readByteArray(0x30));
//    console.log(args[0].readPointer().readByteArray(0x10));
//    console.log(args[2].readByteArray(0x10));
//    console.log(args[3].readByteArray(0x160));
    console.log("---");

  },

  /**
   * Called synchronously when about to return from _ZN23BlockSerializationUtils10addToCacheERNS_15NbtToBlockCacheEjPK5Block.
   *
   * See onEnter for details.
   *
   * @this {object} - Object allowing you to access state stored in onEnter.
   * @param {function} log - Call this function with a string to be presented to the user.
   * @param {NativePointer} retval - Return value represented as a NativePointer object.
   * @param {object} state - Object allowing you to keep state across function calls.
   */
  onLeave: function (log, retval, state) {
  }
}
