/*
 * Auto-generated by Frida. Please modify to match the signature of _ZNK12BlockPalette8getBlockERKj.
 * This stub is currently auto-generated from manpages when available.
 *
 * For full API reference, see: https://frida.re/docs/javascript-api/
 */

{
  /**
   * Called synchronously when about to call _ZNK12BlockPalette8getBlockERKj.
   *
   * @this {object} - Object allowing you to store state for use in onLeave.
   * @param {function} log - Call this function with a string to be presented to the user.
   * @param {array} args - Function arguments represented as an array of NativePointer objects.
   * For example use args[0].readUtf8String() if the first argument is a pointer to a C string encoded as UTF-8.
   * It is also possible to modify arguments by assigning a NativePointer object to an element of this array.
   * @param {object} state - Object allowing you to keep state across function calls.
   * Only one JavaScript function will execute at a time, so do not worry about race-conditions.
   * However, do not use this to store function arguments across onEnter/onLeave, but instead
   * use "this" which is an object for keeping state local to an invocation.
   */
  onEnter: function (log, args, state) {
//    log("getBlock(): " + args[0] + ", " + args[1] + ", " + args[2])
//    log('_ZNK12BlockPalette8getBlockERKj(): ' + args[1].readUInt());
//    this.m_id = args[1].readUInt();

//    console.log(args[2].readByteArray(0x160));

  },

  /**
   * Called synchronously when about to return from _ZNK12BlockPalette8getBlockERKj.
   *
   * See onEnter for details.
   *
   * @this {object} - Object allowing you to access state stored in onEnter.
   * @param {function} log - Call this function with a string to be presented to the user.
   * @param {NativePointer} retval - Return value represented as a NativePointer object.
   * @param {object} state - Object allowing you to keep state across function calls.
   */
  onLeave: function (log, retval, state) {
    function readStdString (str) {
      const isTiny = (str.readU8() & 1) === 0;
      if (isTiny) {
        return str.add(1).readUtf8String();
      }

      return str.add(2 * Process.pointerSize).readPointer().readUtf8String();
    }

    function nextInList(ptr) {
        if ( ptr.add(4).readPointer().toInt32() != 0) {
            var current = v4.add(4).readPointer();

            while(current.readUInt() != 0) {
                current = current.readPointer();
            }
            return current;
        } else {
            console.log("zero");
            var current = ptr;
            while ( !current.add(8).readPointer().readPointer().equals(current) ) {
                current = current.add(8).readPointer();
            }
            return current;
        }
    }

    // Recurse through a compound tag
    function readCompoundTag(tag) {

        return "end";

    }

    var ptr_get_runtime_id = Module.findExportByName("libminecraftpe.so", "_ZNK5Block12getRuntimeIdEv");
    var ptr_get_fullname = Module.findExportByName("libminecraftpe.so", "_ZNK5Block11getFullNameEv");
    var ptr_get_fullname_legacy = Module.findExportByName("libminecraftpe.so", "_ZNK11BlockLegacy11getFullNameEv");
    var ptr_to_debug_string = Module.findExportByName("libminecraftpe.so", "_ZNK5Block13toDebugStringEv");
    var ptr_compoundtag_tostring = Module.findExportByName("libminecraftpe.so", "_ZNK11CompoundTag8toStringEv");
    var ptr_listtag_tostring = Module.findExportByName("libminecraftpe.so", "_ZNK7ListTag8toStringEv");
    var ptr_stringtag_tostring = Module.findExportByName("libminecraftpe.so", "_ZNK9StringTag8toStringEv");


    var fn_get_runtime_id = new NativeFunction(ptr_get_runtime_id, 'pointer', ['pointer']);
    var fn_get_fullname = new NativeFunction(ptr_get_fullname, 'pointer', ['pointer', 'pointer']);
    var fn_get_fullname_legacy = new NativeFunction(ptr_get_fullname_legacy, 'pointer', ['pointer', 'pointer']);
    var fn_to_debug_string = new NativeFunction(ptr_to_debug_string, 'pointer', ['pointer','pointer']);
    var fn_compound_tag_to_string = new NativeFunction(ptr_compoundtag_tostring, 'pointer', ['pointer', 'pointer']);
    var fn_listtag_tostring = new NativeFunction(ptr_listtag_tostring, 'pointer', ['pointer', 'pointer']);
    var fn_stringtag_tostring = new NativeFunction(ptr_stringtag_tostring, 'pointer', ['pointer', 'pointer']);
    var fn_tag__get_tag_name = new NativeFunction(Module.findExportByName("libminecraftpe.so", "_ZN3Tag10getTagNameENS_4TypeE"),
        'void', ['pointer', 'pointer']);
    var fn_block__build_serialization_id = new NativeFunction(Module.findExportByName("libminecraftpe.so", "_ZN5Block20buildSerializationIdEj"),
        'void', ['pointer', 'uint']);
    var fn_compound_tag_variant__get = new NativeFunction(Module.findExportByName("libminecraftpe.so", "_ZNK18CompoundTagVariant3getEv"),
        'pointer', ['pointer']);
    var fn_block__get_serialization_id = new NativeFunction(Module.findExportByName("libminecraftpe.so", "_ZNK5Block18getSerializationIdEv"),
        'pointer', ['pointer']);

    var output = Memory.alloc(0x500);

    var block = retval;
    console.log("Block: " + fn_get_fullname(output, block).add(0x8).readPointer().readUtf8String());

    console.log(block.readByteArray(0x30));

//    // Show compoundTag Memory
    var compoundTag = block.add(0x0c);
//    console.log("CompoundTag");
//    console.log(compoundTag.readByteArray(0x120));

    console.log(readCompoundTag(compoundTag));

    var v4 = compoundTag.add(0x4).readPointer();
    var v5 = compoundTag.add(0x8);

    console.log("v4 " + v4);
    console.log("v5 " + v5);

    var v7 = fn_compound_tag_variant__get(v4.add(0x8*4));
    console.log("v7 " + v7);

    var fn_id = new NativeFunction(v7.readPointer().add(0x4 * 6).readPointer(), 'uint', ['pointer']);
    var id = fn_id(compoundTag);
    var fn_local_to_string = new NativeFunction(v7.readPointer().add(0x4 * 5).readPointer(), 'void', ['pointer','pointer']);
    fn_local_to_string(output, v7);

    var name = v4.add(0x4*4);
    console.log(readStdString(name) + " = " + readStdString(output));;

//    console.log(compoundTag.readPointer().add(0x14 * 4).readPointer().readByteArray(0x60));
//    console.log(ptr_compoundtag_tostring);

    // Next Stuff
    console.log("+++next+++");
    v4 = nextInList(v4);
//    if ( v4.add(4).readPointer().toInt32() != 0) {
//        console.log("non-zero");
//
//        var vv1 = v4.add(4).readPointer();
//        do {
//            var vv3 = vv1;
//            vv1 = vv1.readPointer();
//        } while (vv1.toInt32() != 0);
//        v4 = vv3;
//    } else {
//        console.log("zero");
//        while ( !v4.add(8).readPointer().readPointer().equals(v4) ) {
//            console.log(v4);
//            v4 = v4.add(8).readPointer();
//        }
//        v4 = v4.add(8).readPointer();
//    }
//
    var v7 = fn_compound_tag_variant__get(v4.add(0x8*4));

    var fn_id = new NativeFunction(v7.readPointer().add(0x4 * 6).readPointer(), 'uint', ['pointer']);
    var id = fn_id(compoundTag);
    var fn_local_to_string = new NativeFunction(v7.readPointer().add(0x4 * 5).readPointer(), 'void', ['pointer','pointer']);
    fn_local_to_string(output, v7);

    var name = v4.add(0x4*4);
    console.log(readStdString(name) + " = " + readStdString(output));;


        // Next Stuff
    console.log("+++next+++");
    if ( v4.add(4).readPointer().toInt32() != 0) {
        console.log("non-zero");

        var vv1 = v4.add(4).readPointer();
        do {
            var vv3 = vv1;
            vv1 = vv1.readPointer();
        } while (vv1.toInt32() != 0);
        v4 = vv3;
    } else {
        console.log("zero");
        while ( !v4.add(8).readPointer().readPointer().equals(v4) ) {
            console.log(v4);
            v4 = v4.add(8).readPointer();
        }
        v4 = v4.add(8).readPointer();
    }
//
    var v7 = fn_compound_tag_variant__get(v4.add(0x8*4));

    var fn_id = new NativeFunction(v7.readPointer().add(0x4 * 6).readPointer(), 'uint', ['pointer']);
    var id = fn_id(compoundTag);
    var fn_local_to_string = new NativeFunction(v7.readPointer().add(0x4 * 5).readPointer(), 'void', ['pointer','pointer']);
    fn_local_to_string(output, v7);

    var name = v4.add(0x4*4);
    console.log(readStdString(name) + " = " + readStdString(output));;


//
//    var s_v1 = v4.add(4*2);
//    var s_v2;
//    do {
//        console.log(s_v1 + " " + readStdString(s_v1.add(0x4*4)));
//        s_v2 = s_v1;
//        s_v1 = s_v1.readPointer();
//    } while (s_v1.toInt32() != 0);
//
//    var v4 = s_v2;
////    console.log(v4.readByteArray(0x30));
//
//    console.log("v4 " + v4);;
//    v7 = fn_compound_tag_variant__get(v4.add(0x8*4));
//    console.log("name: " + readStdString(v4.add(0x4*4)));
//    fn_id = new NativeFunction(v7.readPointer().add(0x4 * 6).readPointer(), 'uint', ['pointer']);
//    console.log("id: " + fn_id(v7));
//
//
//    console.log("+++next+++");
//
//    // Next Stuff
//    var s_v1 = v4.add(4*2).readPointer();
//    var s_v2;
//    do {
//        console.log(s_v1 + " " + readStdString(s_v1.add(0x4*4)));
//        s_v2 = s_v1;
//        s_v1 = s_v1.readPointer();
//    } while (s_v1.toInt32() != 0);
//
//    v4 = s_v2;
//    console.log("v4 " + v4);;
//

//    var fn_id2 = new NativeFunction(next_compound.readPointer().add(0x4 * 6).readPointer(), 'uint', ['pointer']);
//    console.log("nextid: " + fn_id2(next_compound));
//    console.log(s_v2.add(0x4).)


//
//
//    console.log(new NativePointer(0xabed1f60).readByteArray(0x160));;

//    fn_block__build_serialization_id(block, 1234);


//    var name = compoundTag.add(0x11).readUtf8String();
//    console.log("name: " + name);


//    var v4 = compoundTag.add(1).readPointer();

//    var v5 = compoundTag.add(0x8);
//
//    var firstChild = compoundTag.add(0x20);

//
//    var name = compoundTag.add(0x11).readUtf8String();
//    console.log("name: " + name);
////


//    console.log("v4");
//    console.log(v4.readByteArray(0x10));

//    // v5
//    console.log("v5");
//    console.log(v5.readPointer().readByteArray(0x10));
//
//    console.log(firstChild.readByteArray(0x30));
//
//    var output = Memory.alloc(0x30);
//    fn_compound_tag_to_string(output, compoundTag);
//    console.log(output.add(8).readPointer().readUtf8String());
//
//



//    fn_tag__get_tag_name(output, compoundTag);
//    console.log(output.readByteArray(0x30));

//
//    fn_to_debug_string(output, block);
//    console.log(output.add(8).readPointer().readUtf8String());

    //console.log(block.add(0xc).readPointer().add(0x14).readPointer().readByteArray(0x90));

//    console.log(compoundTag.readPointer().readByteArray(0x30));

//    var fn_to_string = new NativeFunction(compoundTag.readPointer().add(0x14).readPointer(), 'pointer', ['pointer', 'pointer']);
//    fn_to_string(output, compoundTag);
//    console.log(output.readByteArray(0x100));;

//    var test = Memory.alloc(500);
//    test.writeUtf8String("bumbumbumbum");
//
//    var id = fn_get_runtime_id(retval);
//    var name = fn_to_debug_string(test,retval);
//
//    console.log(this.m_id);
//    console.log(Memory.readByteArray(retval, 64));

// 0x10, 0x14 - 1entries
//
//    console.log(retval.readByteArray(0x30));
//
//    var c_ptr = retval.readPointer();
//    console.log(c_ptr.readByteArray(0x160));




//
//    var fn_to_string = new NativeFunction(c_ptr)

//    var compound_string = Memory.alloc(200);
////
//    fn_stringtag_tostring(compound_string, c_ptr);
//    console.log(compound_string.readByteArray(0x160));

//    var n_ptr = c_ptr.add(8);
//    console.log(n_ptr.readPointer().readByteArray(0x160));
//    console.log(n_ptr.add(8).readPointer().readByteArray(0x20));
    console.log("---")

  }

}

